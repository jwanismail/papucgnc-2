import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// T√ºm √ºr√ºnleri getir
export const getAllProducts = async (req, res) => {
  try {
    const products = await prisma.product.findMany({
      include: {
        campaign: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    // Her √ºr√ºn i√ßin images ve colorOptions array'ini parse et
    const productsWithParsedImages = products.map(product => ({
      ...product,
      images: product.images ? JSON.parse(product.images) : [],
      colorOptions: product.colorOptions ? JSON.parse(product.colorOptions) : []
    }));
    
    res.json(productsWithParsedImages);
  } catch (error) {
    res.status(500).json({ error: '√úr√ºnler getirilirken hata olu≈ütu', message: error.message });
  }
};

// Tekil √ºr√ºn getir
export const getProductById = async (req, res) => {
  try {
    const { id } = req.params;
    const product = await prisma.product.findUnique({
      where: { id },
      include: {
        campaign: true
      }
    });
    
    if (!product) {
      return res.status(404).json({ error: '√úr√ºn bulunamadƒ±' });
    }
    
    // Images ve colorOptions array'ini parse et
    const productWithParsedImages = {
      ...product,
      images: product.images ? JSON.parse(product.images) : [],
      colorOptions: product.colorOptions ? JSON.parse(product.colorOptions) : []
    };
    
    res.json(productWithParsedImages);
  } catch (error) {
    res.status(500).json({ error: '√úr√ºn getirilirken hata olu≈ütu', message: error.message });
  }
};

// Yeni √ºr√ºn ekle
export const createProduct = async (req, res) => {
  try {
    console.log('üìù √úr√ºn olu≈üturma isteƒüi alƒ±ndƒ±:', {
      body: req.body,
      files: req.files
    });

    const { name, description, price, stock, campaignId, colorOptions, sizeStock } = req.body;
    const mainImages = req.files?.images || [];
    const colorImages = req.files?.colorImages || [];
    
    // Validation
    if (!name || !price) {
      console.log('‚ùå Validation hatasƒ±: name veya price eksik');
      return res.status(400).json({ error: '√úr√ºn adƒ± ve fiyatƒ± zorunludur' });
    }

    // CampaignId validation - bo≈ü string ise null yap
    const validCampaignId = campaignId && campaignId.trim() !== '' ? campaignId : null;
    
    // Ana √ºr√ºn resimleri
    const image = mainImages.length > 0 ? `/uploads/${mainImages[0].filename}` : '';
    const images = mainImages.length > 0 ? JSON.stringify(mainImages.map(file => `/uploads/${file.filename}`)) : null;
    
    // Renk se√ßeneklerini i≈üle
    let colorOptionsJSON = null;
    if (colorOptions && colorOptions !== 'null' && colorOptions !== '[]') {
      try {
        const colorOptionsData = typeof colorOptions === 'string' ? JSON.parse(colorOptions) : colorOptions;
        let colorImageIndex = 0;
        
        // Her renk i√ßin resimleri ata
        const processedColorOptions = colorOptionsData.map(colorOption => {
          const imageCount = colorOption.imageCount || 0;
          const colorImagePaths = [];
          
          for (let i = 0; i < imageCount && colorImageIndex < colorImages.length; i++) {
            colorImagePaths.push(`/uploads/${colorImages[colorImageIndex].filename}`);
            colorImageIndex++;
          }
          
          return {
            name: colorOption.name,
            images: colorImagePaths
          };
        });
        
        colorOptionsJSON = JSON.stringify(processedColorOptions);
      } catch (e) {
        console.error('ColorOptions parse hatasƒ±:', e);
      }
    }
    
    console.log('üíæ Veritabanƒ±na kaydediliyor:', {
      name,
      price: parseFloat(price),
      stock: parseInt(stock) || 0,
      campaignId: validCampaignId,
      image,
      imagesCount: mainImages.length,
      colorImagesCount: colorImages.length
    });
    
    const product = await prisma.product.create({
      data: {
        name,
        description,
        price: parseFloat(price),
        stock: parseInt(stock) || 0,
        sizeStock: sizeStock || null,
        image,
        images,
        colorOptions: colorOptionsJSON,
        campaignId: validCampaignId
      },
      include: {
        campaign: true
      }
    });
    
    console.log('‚úÖ √úr√ºn ba≈üarƒ±yla olu≈üturuldu:', product.id);
    
    // JSON parse edilmi≈ü images ve colorOptions ile response d√∂nd√ºr
    const response = {
      ...product,
      images: images ? JSON.parse(images) : [],
      colorOptions: colorOptionsJSON ? JSON.parse(colorOptionsJSON) : []
    };
    
    res.status(201).json(response);
  } catch (error) {
    console.error('‚ùå √úr√ºn olu≈üturma hatasƒ±:', error);
    res.status(500).json({ 
      error: '√úr√ºn eklenirken hata olu≈ütu', 
      message: error.message,
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

// √úr√ºn g√ºncelle
export const updateProduct = async (req, res) => {
  try {
    console.log('üìù √úr√ºn g√ºncelleme isteƒüi alƒ±ndƒ±:', {
      id: req.params.id,
      body: req.body,
      files: req.files
    });

    const { id } = req.params;
    const { name, description, price, stock, campaignId, colorOptions, sizeStock } = req.body;
    const mainImages = req.files?.images || [];
    const colorImages = req.files?.colorImages || [];
    
    // CampaignId validation - bo≈ü string ise null yap
    const validCampaignId = campaignId && campaignId.trim() !== '' ? campaignId : null;
    
    const updateData = {
      name,
      description,
      price: parseFloat(price),
      stock: parseInt(stock),
      sizeStock: sizeStock || null,
      campaignId: validCampaignId
    };
    
    // Yeni ana resimler varsa g√ºncelle
    if (mainImages.length > 0) {
      updateData.image = `/uploads/${mainImages[0].filename}`;
      updateData.images = JSON.stringify(mainImages.map(file => `/uploads/${file.filename}`));
    }
    
    // Renk se√ßeneklerini g√ºncelle
    if (colorOptions && colorOptions !== 'null' && colorOptions !== '[]') {
      try {
        const colorOptionsData = typeof colorOptions === 'string' ? JSON.parse(colorOptions) : colorOptions;
        let colorImageIndex = 0;
        
        const processedColorOptions = colorOptionsData.map(colorOption => {
          const imageCount = colorOption.imageCount || 0;
          const colorImagePaths = [];
          
          for (let i = 0; i < imageCount && colorImageIndex < colorImages.length; i++) {
            colorImagePaths.push(`/uploads/${colorImages[colorImageIndex].filename}`);
            colorImageIndex++;
          }
          
          return {
            name: colorOption.name,
            images: colorImagePaths
          };
        });
        
        updateData.colorOptions = JSON.stringify(processedColorOptions);
      } catch (e) {
        console.error('ColorOptions parse hatasƒ±:', e);
      }
    }
    
    console.log('üíæ Veritabanƒ± g√ºncelleniyor:', updateData);
    
    const product = await prisma.product.update({
      where: { id },
      data: updateData,
      include: {
        campaign: true
      }
    });
    
    console.log('‚úÖ √úr√ºn ba≈üarƒ±yla g√ºncellendi:', product.id);
    
    // JSON parse edilmi≈ü images ve colorOptions ile response d√∂nd√ºr
    const response = {
      ...product,
      images: product.images ? JSON.parse(product.images) : [],
      colorOptions: product.colorOptions ? JSON.parse(product.colorOptions) : []
    };
    
    res.json(response);
  } catch (error) {
    console.error('‚ùå √úr√ºn g√ºncelleme hatasƒ±:', error);
    res.status(500).json({ 
      error: '√úr√ºn g√ºncellenirken hata olu≈ütu', 
      message: error.message,
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

// √úr√ºn sil
export const deleteProduct = async (req, res) => {
  try {
    const { id } = req.params;
    
    await prisma.product.delete({
      where: { id }
    });
    
    res.json({ message: '√úr√ºn ba≈üarƒ±yla silindi' });
  } catch (error) {
    res.status(500).json({ error: '√úr√ºn silinirken hata olu≈ütu', message: error.message });
  }
};

